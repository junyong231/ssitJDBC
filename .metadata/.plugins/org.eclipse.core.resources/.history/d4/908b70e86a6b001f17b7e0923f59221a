package days04.board.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import days04.board.domain.BoardDTO;

public class BoardDAOImpl implements BoardDAO {

	private Connection conn = null; // = DBConn.getConnection 결합력 높아져서 X 의존성 주입(DI)O - Setter, 생성자..
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	//생성자 DI

	public BoardDAOImpl(Connection conn) {
		super();
		this.conn = conn;
	}

	//Setter DI
	public void setConn(Connection conn) {
		this.conn = conn;
	}


	public Connection getConn() {
		return conn;
	}

	@Override
	public ArrayList<BoardDTO> select() throws SQLException {
		//싱글톤으로 만들어서 모두가 이거하나 쓰게 만듬 ?
		long seq;
		String title, writer, email;
		Date writerdate;
		int readed;

		ArrayList<BoardDTO> list = null;

		String sql = " SELECT seq, title, writer, email, writedate, readed " 
				+ " FROM tbl_cstVSBoard " 
				+ " ORDER BY seq DESC " ;

		//days03 ex01 부서조회에서 긁어옴---
		BoardDTO bdto = null;

		try {
			pstmt = conn.prepareStatement(sql); 
			rs = pstmt.executeQuery();


			if (rs.next()) {
				list = new ArrayList<BoardDTO >();
				do {
					seq = rs.getLong("seq");
					title = rs.getString("title");
					writer = rs.getString("writer");
					email = rs.getString("email");
					writerdate = rs.getDate("writedate");
					readed = rs.getInt("readed");
					bdto = new BoardDTO().builder()
							.seq(seq)
							.title(title)
							.writedate(writerdate)
							.writer(writer)
							.email(email)
							.readed(readed)
							.build();
					list.add(bdto);
				} while (rs.next());
			}//if

			//게시판출력(list);

		} catch (SQLException e1) {
			e1.printStackTrace();
		} 	finally {
			try {
				rs.close();
				pstmt.close(); //얘도 pstmt로 바꾸고
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//finally

		return list;
	}

	@Override
	public ArrayList<BoardDTO> select(int currentPage, int numberPerPage) throws SQLException {
		//싱글톤으로 만들어서 모두가 이거하나 쓰게 만듬 ?
		long seq;
		String title, writer, email;
		Date writerdate;
		int readed;

		ArrayList<BoardDTO> list = null;

		String sql = " SELECT * "
				+ "FROM ( "
				+ "    SELECT ROWNUM no , t.* "
				+ "    FROM( "
				+ "    SELECT seq, title, writer, email, writedate, readed "
				+ "    FROM tbl_cstVSBoard  "
				+ "    ORDER BY seq DESC "
				+ "    ) t "
				+ ") b "
				+ "WHERE no BETWEEN ? AND ? " ; // ? 로 바꿔서 한페이지에 얼마뜰지 선택 가능케 함
		// 이제 ? 들어갈 파라미터 ㄱㄱ

		int start = (currentPage-1) * numberPerPage + 1;
		int end = end = start + numberPerPage -1;
		int totalRecords = getTotalRecords();
		
		if (end > totalRecords ) {
			end = totalRecords ;
		}

		//days03 ex01 부서조회에서 긁어옴---
		BoardDTO bdto = null;

		try {
			pstmt = conn.prepareStatement(sql); 
			pstmt.setInt(1, start);
			pstmt.setInt(2, end);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				list = new ArrayList<BoardDTO >();
				do {
					seq = rs.getLong("seq");
					title = rs.getString("title");
					writer = rs.getString("writer");
					email = rs.getString("email");
					writerdate = rs.getDate("writedate");
					readed = rs.getInt("readed");
					bdto = new BoardDTO().builder()
							.seq(seq)
							.title(title)
							.writedate(writerdate)
							.writer(writer)
							.email(email)
							.readed(readed)
							.build();
					list.add(bdto);
				} while (rs.next());
			}//if

			//게시판출력(list);

		} catch (SQLException e1) {
			e1.printStackTrace();
		} 	finally {
			try {
				rs.close();
				pstmt.close(); //얘도 pstmt로 바꾸고
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//finally

		return list;
	}

	@Override
	public int getTotalRecords() throws SQLException {
		int totalRecords = 0;      
		String sql = "SELECT COUNT(*) FROM tbl_cstvsboard";
		this.pstmt = this.conn.prepareStatement(sql);
		this.rs =  this.pstmt.executeQuery();      
		if( this.rs.next() ) totalRecords = rs.getInt(1);      
		this.rs.close();
		this.pstmt.close();            
		return totalRecords;
	}

	@Override
	public int getTotalPages(  int numberPerPage ) throws SQLException {
		int totalPages = 0;      
		String sql = "SELECT CEIL(COUNT(*)/?) FROM tbl_cstvsboard";
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setInt(1, numberPerPage);
		this.rs =  this.pstmt.executeQuery();     	
		if( this.rs.next() ) totalPages = rs.getInt(1);      
		this.rs.close();
		this.pstmt.close();            
		return totalPages;
	}

	@Override
	public int insert(BoardDTO dto) throws SQLException {
		String sql = "INSERT INTO tbl_cstvsboard "
	               + " (seq, writer, pwd, email, title, tag, content ) "
	               + "VALUES "
	               + " (seq_tblcstvsboard.NEXTVAL, ?, ?, ?, ?, ?, ? ) ";
		int rowCount = 0;
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setString(1, dto.getWriter());
		this.pstmt.setString(2, dto.getPwd());
		this.pstmt.setString(3, dto.getEmail());
		this.pstmt.setString(4, dto.getTitle());
		this.pstmt.setInt(5, dto.getTag());
		this.pstmt.setString(6, dto.getContent());
		rowCount = this.pstmt.executeUpdate();		
	 
		return rowCount; // 아까 함수 int형..
	}

	@Override
	public int increaseReaded(long seq) throws SQLException {
		   String sql = " UPDATE tbl_cstvsboard "
		            + " SET readed = readed + 1 "
		            + " WHERE seq = ? ";
		      int rowCount = 0;
		      this.pstmt = this.conn.prepareStatement(sql); 
		      this.pstmt.setLong(1, seq); 
		      rowCount = this.pstmt.executeUpdate();      
		      return rowCount;

	
	}

	@Override
	public BoardDTO view(long seq) throws SQLException {
		   String title, writer, email;
		      Date writedate;
		      int readed;
		      String content;

		      String sql = 
		            "SELECT seq, title, writer, email, writedate, readed, content "
		                  + "FROM tbl_cstVSBoard "
		                  + "WHERE seq = ? ";

		      // 부서조회() S
		      BoardDTO dto = null;

		      try {         
		         pstmt = conn.prepareStatement(sql);
		         this.pstmt.setLong(1, seq); 
		         rs = pstmt.executeQuery();

		         if (rs.next()) {
		            // seq, title, writer, email, writedate, readed 
		            seq = rs.getLong("seq");
		            title = rs.getString("title");
		            writer = rs.getString("writer");
		            email = rs.getString("email");
		            writedate = rs.getDate("writedate");
		            readed = rs.getInt("readed");
		            content = rs.getString("content");
		            dto = new BoardDTO().builder()
		                  .seq(seq)
		                  .title(title)
		                  .writedate(writedate)
		                  .writer(writer)
		                  .email(email)
		                  .readed(readed)
		                  .content(content)
		                  .build();
		         } // if
		      } catch (SQLException e) { 
		         e.printStackTrace();
		      } finally {
		         try {
		            rs.close();
		            pstmt.close();
		         } catch (SQLException e) {
		            e.printStackTrace();
		         }
		      }
		      // 부서조회() E

		      return dto;
		   }

	@Override
	public int delete(long seq) throws SQLException {
		 
		int rowCount = 0 ;
		
		String sql = " DELETE FROM tbl_cstvsboard "
						+ " WHERE seq = ? ";
		 
		
		pstmt = conn.prepareStatement(sql);
        this.pstmt.setLong(1, seq); 
        rowCount = this.pstmt.executeUpdate();  
        
		
		
		return rowCount;
	}

	@Override
	public int update(BoardDTO dto) throws SQLException {
		
		String sql = " UPDATE tbl_cstvsboard "
						+ " SET  title = ?, content = ? "
						+ " WHERE seq = ? ";
		int rowCount = 0;
		this.pstmt = this.conn.prepareStatement(sql);

		this.pstmt.setString(1, dto.getTitle());
		this.pstmt.setString(2, dto.getContent());
		this.pstmt.setLong(3, dto.getSeq());
		
		rowCount = this.pstmt.executeUpdate();		
	 
		return rowCount; // 아까 함수 int형..

	}

	@Override
	public ArrayList<BoardDTO> searchT(String searchKeyword) throws SQLException {
		long seq;
		String title, writer, email;
		Date writerdate;
		int readed;
		
		ArrayList<BoardDTO> list = null;
		
		String sql = " SELECT *  "
						+ " FROM tbl_cstvsboard  "
						+ " WHERE title LIKE ('%?%') ";
		
		//days03 ex01 부서조회에서 긁어옴---
		BoardDTO bdto = null;

				try {
					pstmt = conn.prepareStatement(sql); 
					this.pstmt.setString(1, searchKeyword); 
					rs = pstmt.executeQuery();

					if (rs.next()) {
						list = new ArrayList<BoardDTO >();
						do {
							seq = rs.getLong("seq");
							title = rs.getString("title");
							writer = rs.getString("writer");
							email = rs.getString("email");
							writerdate = rs.getDate("writedate");
							readed = rs.getInt("readed");
							
							bdto = new BoardDTO().builder()
									.seq(seq)
									.title(title)
									.writedate(writerdate)
									.writer(writer)
									.email(email)
									.readed(readed)
									.build();
							list.add(bdto);
						} while (rs.next());
					}//if
				} catch (SQLException e1) {
					e1.printStackTrace();
				} 	finally {
					try {
						rs.close();
						pstmt.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}//finally

			return list;
		

	}

//	@Override
//	public BoardDTO searchA(String searchKeyword) throws SQLException {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public BoardDTO searchTC(String searchKeyword) throws SQLException {
//		// TODO Auto-generated method stub
//		return null;
//	}


	



	//	private void 게시판출력(ArrayList<BoardDTO> list) {
	//		Iterator<BoardDTO> ir = list.iterator();
	//		System.out.println("-".repeat(30));
	//		//System.out.printf("deptno\tdname\tloc\n");
	//		System.out.println("-".repeat(30));
	//		while (ir.hasNext()) {
	//			BoardDTO bdto =  ir.next();
	//			System.out.printf("%d\t%s\t%s\n"
	//					, bdto.getSeq(), bdto.getTitle(), bdto.getWriter());
	//		}
	//		System.out.println("-".repeat(30));
	//		
	//	}




}//class
